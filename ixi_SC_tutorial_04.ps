%!PS-Adobe-3.0
%%BoundingBox: 38 24 574 768
%%Title: Enscript Output
%%For: Daniel Sheeler
%%Creator: GNU Enscript 1.6.5.2
%%CreationDate: Thu Dec 15 11:45:42 2011
%%Orientation: Landscape
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6.5 2
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6.5 2
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 7 7 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [612 792] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-simple 1.6.5 2

/do_header {	% print default simple header
  gsave
    d_header_x d_header_y HFpt_h 3 div add translate

    HF setfont
    user_header_p {
      5 0 moveto user_header_left_str show

      d_header_w user_header_center_str stringwidth pop sub 2 div
      0 moveto user_header_center_str show

      d_header_w user_header_right_str stringwidth pop sub 5 sub
      0 moveto user_header_right_str show
    } {
      fname length fmodstr length add pagenumstr length add 95 6 idiv add d_header_w 6 idiv le{
        5 0 moveto fname show
        45 0 rmoveto fmodstr show
        45 0 rmoveto pagenumstr show
      } {
        5 0 moveto fmodstr show
        45 0 rmoveto pagenumstr show
        fname length d_header_w 6 idiv idiv 1 add 10 mul 5 exch moveto
        1 1 fname length d_header_w 6 idiv idiv
        {
          dup fname exch 1 sub d_header_w 6 idiv mul d_header_w 6 idiv getinterval show
          5 exch 10 mul fname length d_header_w 6 idiv idiv 1 add 10 mul exch sub moveto
        } for
        5 10 moveto
        fname fname length d_header_w 6 idiv idiv d_header_w 6 idiv mul dup fname length exch sub getinterval show
      }ifelse
    }ifelse

  grestore
} def
%%EndResource
/d_page_w 744 def
/d_page_h 536 def
/d_header_x 0 def
/d_header_y 492 def
/d_header_w 744 def
/d_header_h 44 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 744 def
/d_footer_h 0 def
/d_output_w 744 def
/d_output_h 492 def
/cols 2 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
90 rotate
24 -574 translate
/pagenum 1 def
/fname (ixi_SC_tutorial_04.sc) def
/fdir (.) def
/ftail (ixi_SC_tutorial_04.sc) def
% User defined strings:
/fmodstr (Sun Mar 09 08:06:25 2008) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 466 M
(// =====================================================================) s
5 458 M
(// - SuperCollider Basics -) s
5 450 M
(// =====================================================================) s
5 434 M
(// Tutorial 04 - Additive Synthesis Basics) s
5 418 M
(// =====================================================================) s
5 410 M
(// - ixi audio tutorial - www.ixi-audio.net) s
5 402 M
(// =====================================================================) s
5 378 M
(/*              ) s
5 370 M
(                ---------------------------------------------------------------) s
5 362 M
(                Copyright \(c\) 2005-2008, ixi audio.) s
5 354 M
(                This work is licensed under a Creative Commons ) s
5 346 M
(                Attribution-NonCommercial-ShareAlike 2.0 England & Wales License.) s
5 338 M
(                http://creativecommons.org/licenses/by-nc-sa/2.0/uk/) s
5 330 M
(                ---------------------------------------------------------------) s
5 322 M
(*/) s
5 290 M
(// ========== Contents of this tutorial ==========) s
5 274 M
(//      1\) Creating complex waves out of sines) s
5 266 M
(//      2\) Bell Synthesis) s
5 258 M
(//      3\) Stupid harmonics GUI) s
5 250 M
(//      4\) Some Additive SynthDefs with routines playing them) s
5 242 M
(//      5\) Polishook patch) s
5 234 M
(//      6\) Using Control) s
5 226 M
(//      7\) Using Klang and DynKlang) s
5 194 M
(/* ) s
5 186 M
(The Fourier Theorem states that any sound can be described as a function) s
5 178 M
(made out of pure sinewaves. If we add enough sinewaves together with different) s
5 170 M
(frequency, phase and amplitude envelopes, we can simulate any sound. ) s
5 162 M
(*/) s
5 146 M
(// making complex sounds out of sinusoidals) s
5 130 M
(Server.default = s = Server.internal.boot;) s
5 114 M
(// create a new analyzer) s
5 106 M
(FreqScope.new\(500, 300\);) s
5 82 M
(// so what's additive synthesis?) s
5 74 M
(// adding waves together:) s
5 66 M
({SinOsc.ar\(440,0, 0.4\) + SinOsc.ar\(880, 0, 0.4\)!2}.play) s
5 50 M
(// etc:) s
5 34 M
(\() s
5 26 M
({       ) s
5 18 M
(var freq = 200;) s
5 10 M
(SinOsc.ar\(freq, 0, 0.2\)   + ) s
5 2 M
(SinOsc.ar\(freq*2, 0, 0.2\) +) s
377 482 M
(SinOsc.ar\(freq*3, 0, 0.2\) + ) s
377 474 M
(SinOsc.ar\(freq*4, 0, 0.2\) ) s
377 466 M
(!2}.play) s
377 458 M
(\)) s
377 442 M
(// but this is not really practical) s
377 418 M
(// first a little trick:) s
377 402 M
(// a\) here is an array with 5 items:) s
377 394 M
(Array.fill\(5, {arg i; i.postln;}\);) s
377 378 M
(// b\) this is the same as \(using a shortcut\):) s
377 370 M
({arg i; i.postln;}.dup\(5\)) s
377 354 M
(// c\) or simply \(using another shortcut\):) s
377 346 M
({arg i; i.postln;}!5) s
377 330 M
(// d\) we can then sum the items in the array \(add them together\):) s
377 322 M
(Array.fill\(5, {arg i; i.postln;}\).sum;) s
377 306 M
(// e\) we could do it this way as well:) s
377 298 M
(sum\({arg i; i.postln;}.dup\(5\)\);) s
377 282 M
(// f\) or this way:) s
377 274 M
(\({arg i; i.postln;}.dup\(5\)\).sum;) s
377 258 M
(// g\) or this way:) s
377 250 M
(\({arg i; i.postln;}!5\).sum;) s
377 234 M
(// h\) or simply this way:) s
377 226 M
(sum\({arg i; i.postln;}!5\);) s
377 170 M
(// 1\) ========= Creating complex waves out of sines ==========) s
377 138 M
(// NOW, let's get started:) s
377 122 M
(// A saw wave) s
377 114 M
(// where the harmonics \(overtones\) are decreasing in amplitude) s
377 106 M
(// \(harmonics are integer multiples of the fundamental\)) s
377 90 M
(\() s
377 82 M
(f = {) s
377 74 M
(        \({arg i;) s
377 66 M
(                var j = i + 1;) s
377 58 M
(                SinOsc.ar\(300 * j, 0, 0.6/j\) // try pi in the phase argument) s
377 50 M
(        } ! 30\).sum // we sum this function 30 times) s
377 42 M
(!2}; // and we make it a stereo signal) s
377 34 M
(\)) s
377 18 M
(f.plot;) s
377 10 M
(f.play;) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
90 rotate
24 -574 translate
/pagenum 2 def
/fname (ixi_SC_tutorial_04.sc) def
/fdir (.) def
/ftail (ixi_SC_tutorial_04.sc) def
% User defined strings:
/fmodstr (Sun Mar 09 08:06:25 2008) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 482 M
(// Inverse saw wave) s
5 466 M
(\() s
5 458 M
(f = {) s
5 450 M
(       \({arg i;) s
5 442 M
(                var j = i + 1;) s
5 434 M
(                SinOsc.ar\(300 * j, pi, 0.6/j\) // note pi ) s
5 426 M
(        } ! 30\).sum;) s
5 418 M
(};) s
5 410 M
(\)) s
5 394 M
(f.plot;) s
5 386 M
(f.play;) s
5 362 M
(// Pulse wave) s
5 346 M
(//  pulse wave \(If the length of the on time of the pulse is equal to the length of th) s
5 338 M
(e ) s
5 330 M
(//  off time \(also known as a duty cycle of 1:1\) then the pulse wave may also be ) s
5 322 M
(//  called a square wave.) s
5 306 M
(\() s
5 298 M
(f = {) s
5 290 M
(        \({arg i;) s
5 282 M
(                var j = i * 2 + 1; // the odd harmonics \(1,3,5,7,etc\)) s
5 274 M
(                SinOsc.ar\(300 * j, 0, 1/j\)) s
5 266 M
(        } ! 20\).sum;) s
5 258 M
(};) s
5 250 M
(\)) s
5 234 M
(f.plot;) s
5 226 M
(f.play;) s
5 202 M
(// triangle wave) s
5 186 M
(\() s
5 178 M
(f = {) s
5 170 M
(        \({arg i;) s
5 162 M
(                var j = i * 2 + 1;) s
5 154 M
(                SinOsc.ar\(300 * j, pi/2, 0.7/j.squared\) // cosine wave \(phase shift\)) s
5 146 M
(        } ! 20\).sum;) s
5 138 M
(};) s
5 130 M
(\)) s
5 114 M
(f.plot;) s
5 106 M
(f.play;) s
5 82 M
(// and how would we create a synth definition out of this.... simple:) s
5 74 M
(SynthDef\(\\triwave, {arg freq=400;) s
5 66 M
(       Out.ar\(0, ) s
5 58 M
(        \({arg i;) s
5 50 M
(                var j = i * 2 + 1;) s
5 42 M
(                SinOsc.ar\(freq * j, pi/2, 0.6 / j.squared\) // cosine wave \(phase shift) s
5 34 M
(\)) s
5 26 M
(        } ! 20\).sum // sum all the waves into one) s
5 18 M
(        !2\) // make the signal stereo) s
5 10 M
(}\).load\(s\)) s
377 482 M
(Synth\(\\triwave, [\\freq, 300]\)) s
377 474 M
(Synth\(\\triwave, [\\freq, 900]\)) s
377 458 M
(// \(But we don't need to as there is a UGen \(written in C, thus faster\) called LFTri\)) s
377 434 M
(////////////////////// funky waves:) s
377 418 M
(// nice one) s
377 410 M
(\() s
377 402 M
(f = {) s
377 394 M
(        \({arg i;) s
377 386 M
(                var j = i + 1;) s
377 378 M
(                SinOsc.ar\(MouseX.kr\(20,300\) * j, 0, 0.1/j + i\)) s
377 370 M
(        } ! 60\).sum;) s
377 362 M
(}) s
377 354 M
(\)) s
377 346 M
(f.plot\( maxval:nil, minval:nil\);) s
377 338 M
(f.play;) s
377 314 M
(// another \(sine - saw\)) s
377 306 M
(\() s
377 298 M
(f = {) s
377 290 M
(        \({arg i;) s
377 282 M
(                var j = i + 1;) s
377 274 M
(                SinOsc.ar\(MouseX.kr\(20,800\) * j, pi/2, 1/j.squared\)) s
377 266 M
(        } ! 30\).sum;) s
377 258 M
(}) s
377 250 M
(\)) s
377 234 M
(f.plot;) s
377 226 M
(f.play;) s
377 202 M
(// ) s
377 194 M
(\() s
377 186 M
(f = {) s
377 178 M
(        \({arg i;) s
377 170 M
(                var j = i + 1;) s
377 162 M
(                SinOsc.ar\(MouseX.kr\(20,800\) * j.distort, pi/2, 1/j.squared\)) s
377 154 M
(        } ! 60\).sum;) s
377 146 M
(};) s
377 138 M
(\)) s
377 122 M
(f.plot;) s
377 114 M
(f.play;) s
377 82 M
(// ) s
377 74 M
(\() s
377 66 M
(f = {) s
377 58 M
(        \({arg i;) s
377 50 M
(                var j = i * 2.cubed + 1;) s
377 42 M
(                SinOsc.ar\(MouseX.kr\(20,800\) * j, 0, 1/j\)) s
377 34 M
(        } ! 20\).sum;) s
377 26 M
(};) s
377 18 M
(\)) s
377 10 M
(f.plot;) s
377 2 M
(f.play;) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
90 rotate
24 -574 translate
/pagenum 3 def
/fname (ixi_SC_tutorial_04.sc) def
/fdir (.) def
/ftail (ixi_SC_tutorial_04.sc) def
% User defined strings:
/fmodstr (Sun Mar 09 08:06:25 2008) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 466 M
(// ) s
5 458 M
(\() s
5 450 M
(f = {) s
5 442 M
(        \({arg i;) s
5 434 M
(                var j = i * 2.squared.distort + 1;) s
5 426 M
(                SinOsc.ar\(MouseX.kr\(20,800\) * j, 0, 1/j\)) s
5 418 M
(        } ! 20\).sum;) s
5 410 M
(};) s
5 402 M
(\)) s
5 386 M
(f.plot\(minval:nil, maxval:nil\);) s
5 378 M
(f.play;) s
5 338 M
(// Blip works like Saw, apart from all the harmonics have the same amplitude) s
5 330 M
(// but you can control dynamically how many harmonics there are) s
5 322 M
({ Blip.ar\(200, MouseX.kr\(1,110\),0.8\)!2 }.freqscope;) s
5 306 M
(// compare with a saw wave) s
5 298 M
({ Saw.ar\(200 *MouseX.kr\(1,100\),0.8\)!2 }.freqscope;) s
5 282 M
(// see how the saw wave is band limited \(using the FreqScope\)???) s
5 274 M
(// compare that with a non-band limited UGen like LFSaw) s
5 266 M
({ LFSaw.ar\(200 *MouseX.kr\(1,100\),0.8\)!2 }.freqscope;) s
5 226 M
(// 2\) ========= Bell Synthesis ==========) s
5 210 M
(// we try to create a bell like sound:) s
5 194 M
(// using the synthdef from last tutorial, but we add duration to the envelope) s
5 186 M
(\() s
5 178 M
(SynthDef\(\\stereosineWenv, {arg freq=333, amp=0.4, dur, pan=0.0; // we add a new argume) s
5 170 M
(nt) s
5 162 M
(        var signal, env;) s
5 154 M
(        env = EnvGen.ar\(Env.perc\(0.01, dur\), doneAction:2\); // doneAction gets rid of ) s
5 146 M
(the synth) s
5 138 M
(        signal = SinOsc.ar\(freq, 0, amp\) * env;) s
5 130 M
(        signal = Pan2.ar\(signal, pan\);) s
5 122 M
(        Out.ar\(0, signal\);) s
5 114 M
(}\).load\(s\) // we load the synthdef into the server) s
5 106 M
(\)) s
5 90 M
(\() s
5 82 M
(var numberOfSynths;) s
5 74 M
(numberOfSynths = 15;) s
5 66 M
(Array.fill\(numberOfSynths, {Synth\(\\stereosineWenv, ) s
5 58 M
(                                                                [       \\freq, 300+\(43) s
5 50 M
(0.rand\),) s
5 42 M
(                                                                        \\phase, 1.0.ra) s
5 34 M
(nd,) s
5 26 M
(                                                                        \\amp, numberOf) s
5 18 M
(Synths.reciprocal, //.reci = \(1/nr\)) s
5 10 M
(                                                                        \\dur, 2+\(1.0.r) s
5 2 M
(and\)]\)) s
377 482 M
(                                ;}\);) s
377 474 M
(\)) s
377 442 M
(// you could also put the array of partials \(inharmonic spectra\) into the synthdef:) s
377 434 M
(\() s
377 426 M
(SynthDef\(\\sabell, {arg freq=333, amp=0.4, dur=2, pan=0.0; // we add a new argument) s
377 418 M
(        var signal, env;) s
377 410 M
(        env = EnvGen.ar\(Env.perc\(0.01, dur\), doneAction:2\); // doneAction gets rid of ) s
377 402 M
(the synth) s
377 394 M
(        signal = Array.fill\(15, {SinOsc.ar\(freq+\(430.rand\), 1.0.rand, 15.reciprocal\)}\)) s
377 386 M
( * env;) s
377 378 M
(        signal = Pan2.ar\(signal, pan\);) s
377 370 M
(        Out.ar\(0, signal\);) s
377 362 M
(}\).load\(s\)) s
377 354 M
(\)) s
377 338 M
(Synth\(\\sabell\) // same sound all the time) s
377 322 M
(Synth\(\\sabell, [\\freq, 444+\(400.rand\)]\) // new frequency, but same sound) s
377 306 M
(// why?) s
377 290 M
(// this is because the array \(and the 430.rand\) is defined when you compile the) s
377 282 M
(// synth definition. Try to recompile the synthdef and you get a new sound) s
377 266 M
(// This can be good in for many usages, but not the right for others. \(later, we will ) s
377 258 M
(see why\)) s
377 242 M
(// you can also do this using the Klang Ugen) s
377 234 M
(// Klang is a bank of sine oscillators) s
377 218 M
({Klang.ar\(`[ [800, 1000, 1200],[0.3, 0.3, 0.3],[pi,pi,pi]], 1, 0\)}.play) s
377 194 M
(// again, using the synthdef structure compiles it using one array) s
377 186 M
(\() s
377 178 M
(SynthDef\(\\saklangbell, {arg freq=400, amp=0.4, dur=2, pan=0.0; // we add a new argumen) s
377 170 M
(t) s
377 162 M
(        var signal, env;) s
377 154 M
(        env = EnvGen.ar\(Env.perc\(0.01, dur\), doneAction:2\); // doneAction gets rid of ) s
377 146 M
(the synth) s
377 138 M
(        signal = Klang.ar\(`[freq*[1,2,3,4], [0.25, 0.25, 0.25, 0.25], nil]\) * env;) s
377 130 M
(        signal = Pan2.ar\(signal, pan\);) s
377 122 M
(        Out.ar\(0, signal\);) s
377 114 M
(}\).load\(s\)) s
377 106 M
(\)) s
377 90 M
(Synth\(\\saklangbell, [\\freq, 300]\)) s
377 50 M
(// 3\) ========= Stupid harmonics GUI ==========) s
377 26 M
(// a patch showing harmonics of a fundamental \(the slider on the right is the fundamen) s
377 18 M
(tal freq\)) s
377 2 M
(SynthDef\(\\oscsynth, { arg bufnum, rate = 440, ts= 1; ) s
_R
S
%%Page: (4) 4
%%BeginPageSetup
_S
90 rotate
24 -574 translate
/pagenum 4 def
/fname (ixi_SC_tutorial_04.sc) def
/fdir (.) def
/ftail (ixi_SC_tutorial_04.sc) def
% User defined strings:
/fmodstr (Sun Mar 09 08:06:25 2008) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 482 M
(        a = Osc.ar\(bufnum, rate, 0, 0.2\) * EnvGen.ar\(Env.perc\(1\), timeScale:ts, doneAc) s
5 474 M
(tion:2\);) s
5 466 M
(        Out.ar\(0, a ! 2\);) s
5 458 M
(}\).load\(s\);) s
5 442 M
(\() s
5 434 M
(var bufsize, ms, slid, cspec, rate;) s
5 426 M
(var harmonics;) s
5 410 M
(rate = 220;) s
5 402 M
(bufsize=4096;  // check the bufsize) s
5 394 M
(harmonics=20;) s
5 378 M
(b=Buffer.alloc\(s, bufsize, 1\);) s
5 362 M
(x = Synth\(\\oscsynth, [\\bufnum, b.bufnum, \\ts, 0.1]\);) s
5 346 M
(// GUI :) s
5 338 M
(w = SCWindow\("harmonics", Rect\(200, 470, 20*harmonics+140,150\)\).front;) s
5 330 M
(ms = SCMultiSliderView\(w, Rect\(20, 20, 20*harmonics, 100\)\);) s
5 322 M
(ms.value_\(Array.fill\(harmonics,0.0\)\);) s
5 314 M
(ms.isFilled_\(true\);) s
5 306 M
(ms.valueThumbSize_\(1.0\);) s
5 298 M
(ms.indexThumbSize_\(10.0\);) s
5 290 M
(ms.strokeColor_\(Color.blue\);) s
5 282 M
(ms.fillColor_\(Color.blue\(alpha: 0.2\)\);) s
5 274 M
(ms.gap_\(10\);) s
5 266 M
(ms.action_\({b.sine1\(ms.value, false, true, true\)}\); // setting the harmonics !!!!) s
5 258 M
(slid=SCSlider\(w, Rect\(20*harmonics+30, 20, 20, 100\)\);) s
5 250 M
(cspec= ControlSpec\(70,1000, 'exponential', 10, 440\);) s
5 242 M
(slid.action_\({  ) s
5 234 M
(        rate = cspec.map\(slid.value\);   ) s
5 226 M
(        rate.postln;) s
5 218 M
(        x.set\(\\rate, cspec.map\(slid.value\)\); ) s
5 210 M
(        }\);) s
5 202 M
(slid.value_\(0.3\); ) s
5 194 M
(slid.action.value;) s
5 186 M
(SCButton\(w, Rect\(20*harmonics+60, 20, 60, 16\)\)) s
5 178 M
(        .states_\([["Plot it!",Color.black,Color.clear]]\)) s
5 170 M
(        .action_\({      OSCIIBufferPlot.plot\(b\) }\);) s
5 162 M
(SCButton\(w, Rect\(20*harmonics+60, 40, 60, 16\)\)) s
5 154 M
(        .states_\([["Start it!",Color.black,Color.clear], ["Stop it!",Color.black,Color) s
5 146 M
(.clear]]\)) s
5 138 M
(        .action_\({arg sl;) s
5 130 M
(                if\(sl.value ==1, {x = Synth\(\\oscsynth, [\\bufnum, b.bufnum, \\rate, rate) s
5 122 M
(, \\ts, 1000]\);) s
5 114 M
(                        },{x.free;}\);) s
5 106 M
(        }\);     ) s
5 98 M
(SCButton\(w, Rect\(20*harmonics+60, 60, 60, 16\)\)) s
5 90 M
(        .states_\([["Play it!",Color.black,Color.clear]]\)) s
5 82 M
(        .action_\({) s
5 74 M
(                Synth\(\\oscsynth, [\\bufnum, b.bufnum, \\rate, rate, \\ts, 0.1]\);) s
5 66 M
(        }\);     ) s
5 58 M
(SCButton\(w, Rect\(20*harmonics+60, 80, 60, 16\)\)) s
5 50 M
(        .states_\([["Play rand!",Color.black,Color.clear]]\)) s
5 42 M
(        .action_\({) s
5 34 M
(                Synth\(\\oscsynth, [\\bufnum, b.bufnum, \\rate, rrand\(20,100\)+50, \\ts, 0.1) s
5 26 M
(]\);) s
5 18 M
(        }\);     ) s
5 10 M
(\)) s
377 458 M
(// 4\) ========= Some Additive SynthDefs with routines playing them ==========) s
377 426 M
(// - Harmonics and amps passed in lists as arguments) s
377 402 M
(// note the # in front of the arrays in the arguments. It means that they are) s
377 394 M
(// literal \(fixed size\) arrays. And we need to declare them in the argument.) s
377 378 M
(\() s
377 370 M
(SynthDef\(\\addSynthArray, { arg freq=300, dur=0.5, mul=100, addDiv=8, ) s
377 362 M
(                                        freqs = #[1, 2, 3, 4, 5, 6, 7,8,9,10, 11,12,13) s
377 354 M
(,14,15], amps = #[ 0.30136557845783, 0.15068278922892, 0.10045519281928, 0.07534139461) s
377 346 M
(4458, 0.060273115691566, 0.050227596409638, 0.043052225493976, 0.037670697307229, 0.03) s
377 338 M
(3485064273092, 0.030136557845783, 0.027396870768894, 0.025113798204819, 0.023181967573) s
377 330 M
(679, 0.021526112746988, 0.020091038563855 ]; ) s
377 322 M
(                                        ) s
377 314 M
(        var lfo, signal, env;) s
377 306 M
(        var n = 3;) s
377 298 M
(        env = EnvGen.ar\(Env.perc\(0.01, dur\), doneAction: 2\);) s
377 290 M
(        signal = Mix.arFill\(freqs.size, {arg i;) s
377 282 M
(                                SinOsc.ar\() s
377 274 M
(                                        freq * freqs[i], ) s
377 266 M
(                                        0,) s
377 258 M
(                                        amps[i] ) s
377 250 M
(                                \)}\);) s
377 242 M
(        ) s
377 234 M
(        Out.ar\(0, signal.dup * env\)) s
377 226 M
(        }\).load\(s\)) s
377 218 M
(\)) s
377 202 M
(// a saw with 15 harmonics) s
377 194 M
(Synth\(\\addSynthArray, [\\freq, 200]\)) s
377 186 M
(Synth\(\\addSynthArray, [\\freq, 300]\)) s
377 178 M
(Synth\(\\addSynthArray, [\\freq, 400]\)) s
377 162 M
(// compare with a saw with "infinite" harmonics : \) - or up to your Nyquist frequency) s
377 154 M
({Saw.ar\(300\)* EnvGen.ar\(Env.perc\(0.01, 0.5\), doneAction: 2\)!2}.play) s
377 130 M
(// test the routine here below. uncommend and comment the variables f and a) s
377 122 M
(\() s
377 114 M
(fork {  // fork is basically a Routine) s
377 98 M
(        z = Synth\("addSynthArray"\);  // we create the synth we're gonna use) s
377 90 M
(        1.wait;) s
377 82 M
(        ) s
377 74 M
(        100.do {) s
377 66 M
(                        // FREQUENCY of harmonics) s
377 58 M
(                        //f = Array.fill\(15, {arg i; i=i+1; i}\).postln; // harmonic sp) s
377 50 M
(ectra \(saw wave\)) s
377 42 M
(                        f = Array.fill\(15, {10.0.rand}\).postln; // inharmonic spectra ) s
377 34 M
(\(a bell?\)) s
377 26 M
(                        ) s
377 18 M
(                        // AMPLITUDE of harmonics) s
377 10 M
(                        //a = Array.fill\(15, {arg i; i=i+1; 1/i;}\).normalizeSum.postln) s
377 2 M
(; // saw wave amps) s
_R
S
%%Page: (5) 5
%%BeginPageSetup
_S
90 rotate
24 -574 translate
/pagenum 5 def
/fname (ixi_SC_tutorial_04.sc) def
/fdir (.) def
/ftail (ixi_SC_tutorial_04.sc) def
% User defined strings:
/fmodstr (Sun Mar 09 08:06:25 2008) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 482 M
(                        a = Array.fill\(15, {1.0.rand}\).normalizeSum.postln; // random ) s
5 474 M
(amp on each harmonic) s
5 458 M
(                        Synth\(\\addSynthArray\).setn\(\\freqs, f, \\amps, a\);) s
5 450 M
(                1.wait;) s
5 442 M
(        };) s
5 434 M
(      }  ) s
5 426 M
(\)) s
5 386 M
(// - Harmonics and amps and envelopes passed in lists as arguments) s
5 370 M
(\() s
5 362 M
(SynthDef\(\\addSynthArray2, { arg freq=433, dur=4.5, mul=100, addDiv=8, ) s
5 354 M
(        // harmonic frequencies) s
5 346 M
(        harmfreqs = #[1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15], ) s
5 338 M
(        // amplitudes) s
5 330 M
(        amps = #[ 0.30136557845783, 0.15068278922892, 0.10045519281928, 0.075341394614) s
5 322 M
(458, 0.060273115691566, 0.050227596409638, 0.043052225493976, 0.037670697307229, 0.033) s
5 314 M
(485064273092, 0.030136557845783, 0.027396870768894, 0.025113798204819, 0.0231819675736) s
5 306 M
(79, 0.021526112746988, ) s
5 298 M
(0.020091038563855 ], ) s
5 290 M
(        // amplitude envelopes) s
5 282 M
(        envs = #[[ 0.41959595680237, 1.8657131195068 ], [ 0.29434531927109, 0.34258818) s
5 274 M
(626404 ], [ 0.26926666498184, 1.5906579494476 ], [ 0.058589160442352, 1.679356098175 ]) s
5 266 M
(, [ 0.3920511007309, 4.4811072349548 ], [ 0.18552374839783, 5.7129707336426 ], [ 0.019) s
5 258 M
(342243671417, 4.0162460803986 ], [ 0.4850749373436, 4.1913135051727 ], [ 0.04343813657) s
5 250 M
(7606, 0.8137264251709 ], [ 0.08804988861084, 0.60232543945312 ], [ 0.42290794849396, 2) s
5 242 M
(.9702847003937 ], [ 0.081685602664948, 5.7034306526184 ], [ 0.13184547424316, 4.166857) s
5 234 M
(4810028 ], [ 0.25576674938202, 3.5108048915863 ], [ 0.32525300979614, 4.3760755062103]) s
5 226 M
(]; ) s
5 218 M
(        ) s
5 210 M
(        var lfo, signal, env;) s
5 202 M
(        //var n = 3;) s
5 194 M
(        env = EnvGen.ar\(Env.perc\(0.001, dur\), doneAction: 2\);) s
5 186 M
(        signal = Mix.arFill\(harmfreqs.size, {arg i;) s
5 178 M
(                                SinOsc.ar\() s
5 170 M
(                                        freq * harmfreqs[i], ) s
5 162 M
(                                        0,) s
5 154 M
(                                        amps[i] *) s
5 146 M
(                                                EnvGen.kr\( // put an envelope on each ) s
5 138 M
(of the sine waves) s
5 130 M
(                                                        Env.perc\(envs[i][0], envs[i][1) s
5 122 M
(]\), doneAction: 0\)) s
5 114 M
(                                \)) s
5 106 M
(                                }\);) s
5 98 M
(        //signal * env) s
5 90 M
(        Out.ar\(0, signal.dup * env\)) s
5 82 M
(        }\).load\(s\)) s
5 74 M
(\)) s
5 58 M
(// test it) s
5 50 M
({Synth\(\\addSynthArray2, [\\freq, 433]\)}.play\(s\);) s
5 34 M
(\() s
5 26 M
(fork {  ) s
5 18 M
(        //z = Synth\("addSynthArray2"\);  ) s
5 10 M
(        ) s
5 2 M
(        1.wait;) s
377 482 M
(        100.do {) s
377 474 M
(                        // FREQUENCY of harmonics) s
377 466 M
(                        //f = Array.fill\(15, {arg i; i=i+1; i}\).postln; // harmonic sp) s
377 458 M
(ectra \(saw wave\)) s
377 450 M
(                        f = Array.fill\(15, {10.0.rand}\).postln; // inharmonic spectra ) s
377 442 M
(\(a bell?\)) s
377 434 M
(                        ) s
377 426 M
(                        // AMPLITUDE of harmonics) s
377 418 M
(                        //a = Array.fill\(15, {arg i; i=i+1; 1/i;}\).normalizeSum.postln) s
377 410 M
(; // saw wave amps) s
377 402 M
(                        //a = Array.fill\(15, {1.0.rand}\).normalizeSum.postln; // rando) s
377 394 M
(m amp on each harmonic) s
377 386 M
(                        a = Array.fill\(15, {arg i; i=i+1; \(1.0.rand\)/\(i*0.3\)}\).normali) s
377 378 M
(zeSum.postln;) s
377 370 M
(                        ) s
377 362 M
(                        // ENVELOPES for the amplitudes) s
377 354 M
(                        e = Array.fill\(15, {[0.5.rand, 6.0.rand]}\).postln;) s
377 338 M
(                        Synth\(\\addSynthArray2\).setn\(\\harmfreqs, f, \\amps, a, \\envs, e ) s
377 330 M
(\);) s
377 322 M
(                2.0.wait;) s
377 314 M
(        }) s
377 306 M
(      } ) s
377 298 M
(\)) s
377 258 M
(// 5\) ========= Polishook patch ==========) s
377 218 M
(\() s
377 210 M
({       var n = 12;) s
377 202 M
(        ) s
377 194 M
(        Mix.arFill\() s
377 186 M
(                        n,                                                            ) s
377 178 M
(        // generate n sine waves) s
377 170 M
(                        { ) s
377 162 M
(                        SinOsc.ar\(                                                    ) s
377 154 M
(// each with a possible frequency between) s
377 146 M
(                                [67.0.rrand\(2000\), 67.0.rrand\(2000\)],   // low.rrand\(h) s
377 138 M
(igh\) ... floating point values) s
377 130 M
(                                0, ) s
377 122 M
(                                n.reciprocal                                          ) s
377 114 M
(// scale the amplitude of each sine wave) s
377 106 M
(                                                                                      ) s
377 98 M
(        // according to the value of n) s
377 90 M
(                        \)) s
377 82 M
(                        *) s
377 74 M
(                        EnvGen.kr\(                                                    ) s
377 66 M
(// put an envelope on each of the sine waves) s
377 58 M
(                                Env.sine\(2.0.rrand\(17\)\), ) s
377 50 M
(                                doneAction: 0                                   // dea) s
377 42 M
(llocate envelopes only when the) s
377 34 M
(                                                                                      ) s
377 26 M
(        // entire sound is complete \(why?\)) s
377 18 M
(                        \)) s
377 10 M
(                }) s
377 2 M
(        \)) s
_R
S
%%Page: (6) 6
%%BeginPageSetup
_S
90 rotate
24 -574 translate
/pagenum 6 def
/fname (ixi_SC_tutorial_04.sc) def
/fdir (.) def
/ftail (ixi_SC_tutorial_04.sc) def
% User defined strings:
/fmodstr (Sun Mar 09 08:06:25 2008) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 482 M
(        *                                                                             ) s
5 474 M
(        // put an envelope over the whole patch) s
5 466 M
(        EnvGen.kr\() s
5 458 M
(                Env.perc\(11, 6\), ) s
5 450 M
(                doneAction: 2, ) s
5 442 M
(                levelScale: 0.75) s
5 434 M
(        \) ) s
5 426 M
(                                                                                      ) s
5 418 M
(        ) s
5 410 M
(}.play) s
5 402 M
(\)) s
5 370 M
(// 6\) ========= Using Control ==========) s
5 346 M
(/*) s
5 338 M
(There is another way to store arrays within a SynthDef.) s
5 330 M
(This is using the Control class. The controls are good for passing) s
5 322 M
(arrays into running Synths. We therefore have to use the Control UGen) s
5 314 M
(inside our SynthDef.) s
5 306 M
(*/) s
5 282 M
(// Here we make an array of 20 frequency values inside a Control variable) s
5 274 M
(// We pass this array to the SinOsc UGen which makes a "multichannel expansion") s
5 266 M
(// i.e. it creates a sinewave in 20 succeedent audio busses. \(If you had a sound) s
5 258 M
(// card with 20 channels, you'd get a sine out of each channel\)) s
5 250 M
(// But here we mix the sines into one signal. ) s
5 242 M
(// Finally in the Out UGen we use "! 2" which is a multichannel expansion trick) s
5 234 M
(// that makes this a 2 channel signal. \(we could have used signal.dup\)) s
5 210 M
(SynthDef\("manySines", {arg out=0;) s
5 202 M
(        var sines, control, numsines;) s
5 194 M
(        numsines = 20;) s
5 186 M
(        control = Control.names\(\\array\).kr\(Array.rand\(numsines, 400.0, 1000.0\)\);) s
5 178 M
(        sines = Mix\(SinOsc.ar\(control, 0, numsines.reciprocal\)\) ;) s
5 170 M
(        Out.ar\(out, sines ! 2\);) s
5 162 M
(}\).send\(s\);) s
5 146 M
(b = Synth\("manySines"\);) s
5 130 M
(// and here we can change the frequencies of the Control) s
5 114 M
(b.setn\(\\array, Array.rand\(20, 200, 1600\)\); ) s
5 106 M
(b.setn\(\\array, {rrand\(200, 1600\)}!20\); ) s
5 98 M
(b.setn\(\\array, {rrand\(200, 1600\)}.dup\(20\)\);) s
5 90 M
(// NOTE: All three lines above do exactly the same, just different syntax) s
5 66 M
(// The following code is an adaption of the code in the Control helpfile.) s
5 58 M
(// Note that we are using DynKlank \(dynamic Klank\) and we use .kr) s
5 50 M
(// \(control rate\) rather than .ir \(iteration rate\). This allows us to change the) s
5 42 M
(// synth in runtime) s
5 26 M
(\() s
5 18 M
(SynthDef\("control-dynklank", { arg out=0, freq;) s
5 10 M
(        var klank, n, harm, amp, ring;) s
5 2 M
(        n = 9;) s
377 482 M
(        // harmonics) s
377 474 M
(        harm = Control.names\(\\harm\).kr\(Array.series\(4,1,1\)\);) s
377 466 M
(        // amplitudes) s
377 458 M
(        amp = Control.names\(\\amp\).kr\(Array.fill\(4,0.05\)\);) s
377 450 M
(        // ring times) s
377 442 M
(        ring = Control.names\(\\ring\).kr\(Array.fill\(4,1\)\);) s
377 434 M
(        klank = DynKlank.ar\(`[harm,amp,ring], {ClipNoise.ar\(0.003\)}.dup, freq\);) s
377 426 M
(        Out.ar\(out, klank\);) s
377 418 M
(}\).send\(s\);) s
377 410 M
(\)) s
377 394 M
(a = Synth\("control-dynklank", [\\freq, 300]\);) s
377 386 M
(b = Synth\("control-dynklank", [\\freq, 400]\);) s
377 362 M
(a.setn\(\\harm,  Array.rand\(4, 1.0, 4.7\)\)) s
377 354 M
(a.setn\(\\amp, Array.rand\(4, 0.005, 0.1\)\)) s
377 346 M
(a.setn\(\\ring, Array.rand\(4, 0.005, 1.0\)\)) s
377 330 M
(b.setn\(\\harm,  Array.rand\(4, 1.0, 4.7\)\)) s
377 322 M
(b.setn\(\\amp, Array.rand\(4, 0.005, 0.1\)\)) s
377 314 M
(b.setn\(\\ring, Array.rand\(4, 0.005, 1.0\)\)) s
377 274 M
(// 7\) ========= Using Klang and Dynklang ==========) s
377 250 M
(/*) s
377 234 M
(It can be laborous to build an array of synths and set the frequencies and amplitudes) s
377 226 M
(of each. For that there is a UGen called Klang. Klang is a bank of sine oscillators.) s
377 218 M
(NOTE: Klang is a bank of oscillators \(good for additive synthesis\), and Klank is a ) s
377 210 M
(bank of resonators \(good for subtractive synthesis\).) s
377 194 M
(*/) s
377 170 M
(// ----- Using Klang) s
377 154 M
(// bank of 12 oscillators of frequencies between 600 and 1000) s
377 146 M
({ Klang.ar\(`[ Array.rand\(12, 600.0, 1000.0\), nil, nil ], 1, 0\) * 0.05 }.play;) s
377 130 M
(// here we create synths every 2 seconds) s
377 122 M
(\() s
377 114 M
({) s
377 106 M
(loop\({) s
377 98 M
(        {) s
377 90 M
(                Pan2.ar\(Klang.ar\(`[ Array.rand\(12, 200.0, 2000.0\), nil, nil ], 1, 0\), ) s
377 82 M
(1.0.rand\) ) s
377 74 M
(                        * EnvGen.kr\(Env.sine\(4\), 1, 0.02, doneAction: 2\);) s
377 66 M
(        }.play;) s
377 58 M
(        2.wait;) s
377 50 M
(}\)) s
377 42 M
(}.fork;) s
377 34 M
(\)) s
377 10 M
(// ----- Using the Dynklang) s
_R
S
%%Page: (7) 7
%%BeginPageSetup
_S
90 rotate
24 -574 translate
/pagenum 7 def
/fname (ixi_SC_tutorial_04.sc) def
/fdir (.) def
/ftail (ixi_SC_tutorial_04.sc) def
% User defined strings:
/fmodstr (Sun Mar 09 08:06:25 2008) def
/pagenumstr (7) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 482 M
(/*) s
5 474 M
(Klang can not recieve updates to its frequencies nor can it be modulated.) s
5 466 M
(For that we use DynKlang \(Dynamic Klang\).) s
5 458 M
(*/) s
5 442 M
(// frequency modulation) s
5 434 M
(\() s
5 426 M
({ ) s
5 418 M
(        DynKlang.ar\(`[ ) s
5 410 M
(                [800, 1000, 1200] + SinOsc.kr\([2, 3, 0.2], 0, [130, 240, 1200]\),) s
5 402 M
(                [0.6, 0.4, 0.3],) s
5 394 M
(                [pi,pi,pi]) s
5 386 M
(        ]\) * 0.1) s
5 378 M
(}.freqscope;) s
5 370 M
(\)) s
5 354 M
(// amplitude modulation) s
5 346 M
(\() s
5 338 M
({ ) s
5 330 M
(        DynKlang.ar\(`[ ) s
5 322 M
(                [800, 1600, 2400, 3200],) s
5 314 M
(                [0.1, 0.1, 0.1, 0.1] + SinOsc.kr\([0.1, 0.3, 0.8, 0.05], 0, [1, 0.8, 0.) s
5 306 M
(8, 0.6]\),) s
5 298 M
(                [pi,pi,pi]) s
5 290 M
(        ]) s
5 282 M
(\) * 0.1) s
5 274 M
(}.freqscope;) s
5 266 M
(\)) s
5 250 M
(// the following patch shows how a GUI is used to control the amplitudes of the) s
5 242 M
(// DynKlang oscillator array) s
5 218 M
(\(       // create multichannel controls directly with literal arrays:) s
5 210 M
(SynthDef\(\\dynsynth, {| freqs \(#[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\), ) s
5 202 M
(        amps \(#[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\), ) s
5 194 M
(        rings \(#[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\)|) s
5 186 M
(        Out.ar\(0, DynKlang.ar\(`[freqs, amps, rings]\)\)) s
5 178 M
(}\).load\(s\)) s
5 170 M
(\)) s
5 154 M
(\() s
5 146 M
(var bufsize, ms, slid, cspec, rate;) s
5 138 M
(var harmonics;) s
5 122 M
(harmonics = 20;) s
5 98 M
(x = Synth\(\\dynsynth\).setn\() s
5 90 M
(                                \\freqs, Array.fill\(harmonics, {|i| 110*\(i+1\)}\), ) s
5 82 M
(                                \\amps, Array.fill\(harmonics, {0}\)) s
5 74 M
(                                \);) s
5 58 M
(// GUI :) s
5 50 M
(w = SCWindow\("harmonics", Rect\(200, 470, 20*harmonics+40,140\)\).front;) s
5 42 M
(ms = SCMultiSliderView\(w, Rect\(20, 10, 20*harmonics, 110\)\);) s
5 34 M
(ms.value_\(Array.fill\(harmonics,0.0\)\);) s
5 26 M
(ms.isFilled_\(true\);) s
5 18 M
(ms.valueThumbSize_\(1.0\);) s
5 10 M
(ms.indexThumbSize_\(10.0\);) s
5 2 M
(ms.strokeColor_\(Color.blue\);) s
377 482 M
(ms.fillColor_\(Color.blue\(alpha: 0.2\)\);) s
377 474 M
(ms.gap_\(10\);) s
377 466 M
(ms.action_\({ arg ms;) s
377 458 M
(        x.setn\(\\amps, ms.value*harmonics.reciprocal\);) s
377 450 M
(}\); // setting the harmonics !!!!) s
377 442 M
(\)) s
_R
S
%%Trailer
%%Pages: 7
%%DocumentNeededResources: font Courier-Bold Courier 
%%EOF
